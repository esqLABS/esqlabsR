% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities-scenario-configuration.R
\name{addScenarioConfigurationsToExcel}
\alias{addScenarioConfigurationsToExcel}
\title{Add scenario configurations to project Excel files}
\usage{
addScenarioConfigurationsToExcel(
  scenarioConfigurations,
  projectConfiguration,
  appendToExisting = TRUE
)
}
\arguments{
\item{scenarioConfigurations}{Named list of \code{ScenarioConfiguration} objects to add to the project.}

\item{projectConfiguration}{A \code{ProjectConfiguration} object holding base information.}

\item{appendToExisting}{Logical. Whether to append new scenarios to existing ones in the
scenarios file. If \code{FALSE}, the ENTIRE scenarios file will be overwritten with
only the new scenarios. If \code{TRUE} (default), new scenarios will be added to existing ones.}
}
\value{
Invisibly returns the names of the added scenarios.
}
\description{
Adds scenario configurations to the project's Scenarios.xlsx file and ensures
that required application protocol sheets exist in the Applications.xlsx file.
This function handles the Excel file operations for adding scenarios to a project.
}
\details{
This function performs the following operations:
\itemize{
\item Checks for duplicate scenario names if \code{appendToExisting} is \code{TRUE}.
\item Creates missing application protocol sheets in Applications.xlsx by extracting
parameters from PKML files (both Events and Applications parameters).
\item Writes scenario configurations to the Scenarios.xlsx file with proper structure.
\item Manages output paths and their IDs in the OutputPaths sheet.
}

The function ensures that the Excel files are properly structured with the following sheets:
\itemize{
\item \strong{Scenarios sheet}: Contains scenario definitions with columns for scenario name,
individual/population IDs, parameter sheets, application protocol, simulation time,
steady state settings, model file, and output path IDs.
\item \strong{OutputPaths sheet}: Contains output path IDs and their corresponding paths.
When named vectors are used for \code{outputPaths} in scenario configurations, the names
will be used as OutputPathId values.
\item \strong{Applications.xlsx}: Contains application protocol sheets with parameter definitions.
}

The function handles parameter extraction from PKML files, excluding default parameters
like "Volume" and "Application rate", and only includes constant parameters.
}
\examples{
\dontrun{
# Create scenario configurations from PKML
scenarios <- createScenarioConfigurationsFromPKML(
  pkmlFilePaths = "path/to/simulation.pkml",
  projectConfiguration = projectConfiguration
)

# Add scenarios to project Excel files
addScenarioConfigurationsToExcel(
  scenarioConfigurations = scenarios,
  projectConfiguration = projectConfiguration,
  appendToExisting = TRUE
)
}
}
