% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities-scenario-configuration.R
\name{createScenarioConfigurationsFromPKML}
\alias{createScenarioConfigurationsFromPKML}
\title{Create scenario configurations from PKML files}
\usage{
createScenarioConfigurationsFromPKML(
  pkmlFilePaths,
  projectConfiguration,
  scenarioNames = NULL,
  individualId = NULL,
  populationId = NULL,
  applicationProtocols = NULL,
  paramSheets = NULL,
  outputPaths = NULL,
  simulationTime = NULL,
  simulationTimeUnit = NULL,
  steadyState = FALSE,
  steadyStateTime = NULL,
  steadyStateTimeUnit = NULL,
  readPopulationFromCSV = FALSE
)
}
\arguments{
\item{pkmlFilePaths}{Character vector of paths to PKML files to create scenarios from.}

\item{projectConfiguration}{A \code{ProjectConfiguration} object holding base information.}

\item{scenarioNames}{Character vector. Optional custom names for the scenarios. If \code{NULL} (default),
scenario names will be extracted from the simulation names in the PKML files.
If provided, must have the same length as \code{pkmlFilePaths}.}

\item{individualId}{Character string. Optional individual ID to use for all scenarios. If \code{NULL} (default),
no individual will be specified.}

\item{populationId}{Character string. Optional population ID to use for all scenarios. If \code{NULL} (default),
no population will be specified. If provided, sets simulation type to "Population".}

\item{applicationProtocols}{Character vector. Optional application protocol names to use for scenarios.
If \code{NULL} (default), application protocols will be set to the scenario name.
If provided, can be a single string (applied to all scenarios) or a vector
with the same length as \code{pkmlFilePaths}.}

\item{paramSheets}{Character vector. Optional parameter sheet names to apply to scenarios.
If \code{NULL} (default), no parameter sheets will be applied.}

\item{outputPaths}{Character vector. Optional output paths to use for scenarios. If \code{NULL} (default),
output paths will be extracted from the PKML files' output selections.}

\item{simulationTime}{Character string. Optional simulation time to use for scenarios as character string containing one or
multiple time intervals separated by a ';'. Each time interval is a triplet of values <StartTime, EndTime, Resolution>,
where \code{Resolution} is the number of simulated points per time unit defined in the \code{simulationTimeUnit}. If \code{NULL} (default),
simulation time will be extracted from the PKML files' output schema intervals.}

\item{simulationTimeUnit}{Character string. Optional simulation time unit. Only used when \code{simulationTime} is provided.
If \code{NULL} (default), will be extracted from the PKML file's output schema intervals, or set to "min" (minutes) if not available.}

\item{steadyState}{Logical. Whether to simulate steady-state. Default is \code{FALSE}.}

\item{steadyStateTime}{Numeric. Steady-state time. Only used when \code{steadyState = TRUE}.
If \code{NULL} (default), no steady-state time will be set.}

\item{steadyStateTimeUnit}{Character string. Steady-state time unit. Only used when \code{steadyState = TRUE} and \code{steadyStateTime} is provided.
If \code{NULL} (default), "min" will be used.}

\item{readPopulationFromCSV}{Logical. Whether to read population from CSV. Default is \code{FALSE}.}
}
\value{
A named list of \code{ScenarioConfiguration} objects with the names being
the scenario names.
}
\description{
Creates scenario configurations from PKML files by extracting available information
such as applications, output paths, and simulation time settings. This function
creates scenario configuration objects that can be used with the esqlabsR workflow.
}
\details{
This function extracts the following information from PKML files:
\itemize{
\item \strong{Applications}: Application protocol names (defaults to scenario name).
\item \strong{Output paths}: All selected outputs for the simulation from \code{outputSelections$allOutputs}.
\item \strong{Simulation time}: Time intervals with start time, end time, and resolution from \code{outputSchema$intervals}.
\item \strong{Simulation time unit}: Time unit from the output schema intervals (e.g., "h" for hours).
}

The function handles duplicate scenario names by appending indices (e.g., "Scenario_1", "Scenario_2").
It creates scenario configurations but does not write them to Excel files.
Use \code{addScenarioConfigurationsToExcel()} to add the scenarios to the project's Excel files.
}
\examples{
\dontrun{
# Create default project configuration
projectConfiguration <- createDefaultProjectConfiguration()

# Create scenarios from a single PKML file
pkmlPath <- "path/to/simulation.pkml"
scenarios <- createScenarioConfigurationsFromPKML(
  pkmlFilePaths = pkmlPath,
  projectConfiguration = projectConfiguration
)

# Add scenarios to Excel configuration
addScenarioConfigurationsToExcel(
  scenarioConfigurations = scenarios,
  projectConfiguration = projectConfiguration
)

# Create scenarios from multiple PKML files with custom names
pkmlPaths <- c("path/to/sim1.pkml", "path/to/sim2.pkml")
scenarios <- createScenarioConfigurationsFromPKML(
  pkmlFilePaths = pkmlPaths,
  projectConfiguration = projectConfiguration,
  scenarioNames = c("Scenario1", "Scenario2")
)

# Add multiple scenarios to configuration
addScenarioConfigurationsToExcel(
  scenarioConfigurations = scenarios,
  projectConfiguration = projectConfiguration
)
}
}
