---
title: "Use esqlabsR's Workflow"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{esqlabsR-workflow}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE, warning=FALSE, message=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)

library(esqlabsR)
```


## Simulation workflow


## Initialize Project

Information about location of scenario definition files, simulation files, output folders etc. is stored in excel file `ProjectConfiguration.xlsx` located in the folder `Code`. Usually it is not required to edit the contents of this file.

The first step in the workflow is to create a `ProjectConfiguration` from this file that will be used by the scripts to know where to find the required data (for all following examples, we assume that the current working directory is the `Code` folder):

```{r, warning=FALSE}
print(projectConfiguration)
```


## Running scenarios {#running-scenarios}

Running scenarios can be devided into three steps: 

  1) creating the `ScenarioConfiguration` objects, 
  2) creating the `Scenario` objects from configurations,
  3) running the scenarios.

### Creating `ScenarioConfiguration` objects

A `ScenarioConfiguration` object holds all information about a scenario that is defined in the excel files. Though it is possible to create an empty `ScenarioConfiguration` and populate it by hand, we usually want to create scenario configurations from the excel files by calling the `readScenarioConfigurationFromExcel()` function. A `ScenarioConfiguration` is based on the `ProjectConfiguration`, which has to be provided as an argument to the function. To read create the configuration for the *'TestScenario'* scenario defined in the `Scenarios.xlsx` file, we call

```{r createScenarioConfigurations}
# Create `ScenarioConfiguration` objects from excel files
scenarioConfigurations <- readScenarioConfigurationFromExcel(
  scenarioNames = "TestScenario",
  projectConfiguration = projectConfiguration
)

print(scenarioConfigurations$TestScenario)
```

Alternatively, we can create configurations for all scenarios defined in the `Scenarios.xlsx` by calling `readScenarioConfigurationFromExcel(projectConfiguration = projectConfiguration)` without specifying scenarios' names.

### Creating `Scenario` objects from configurations

Once all scenario configurations are set up, `Scenario` objects can be created from them. A `Scenario` object contains the fully parametrized simulation, the `Population` object in case of a population simulation, the underlying `ScenarioConfiguration` object, and the list of all user defined parameters.

During model development/fitting phase, you might want to test out parameter values before storing them in the `Parameters` excel files. You can define the paths of the test parameters, their values and the units in the `TestParameters` file and pass them as `customParams` argument to the `createScenarios()` function.

```{r createScenarios}
# Create `Scenario` objects from `ScenarioConfiguration` objects
scenarios <- createScenarios(scenarioConfigurations)
```

You can view the final parametrization that is applied to the simulation by calling the `finalCustomParams` property:

```{r}
scenarios$TestScenario$finalCustomParams
```

### Running scenarios

Once the `Scenario` objects are created, they can be simulated by calling the `runScenarios()` function. The output of this function is a named list, where the names are scenario names, and the values are the lists of simulations, `SimulatioResults` produced by running the simulation, the output values of the `SimulationResults`, and the population if the scenario is a population simulation.

```{r runScenarios}
simulatedScenariosResults <- runScenarios(
  scenarios = scenarios
)

names(simulatedScenariosResults)
```

It is a good idea to store simulation results as `*.csv` along with simulations as `.*pkml` and, optionally, the used population as `*.csv` file and load them for further processing to avoid re-simulating every time e.g. a change to a figure showing the simulation results is required. The convenient function for saving results of a scenario run is `saveScenarioResults()`.

For further information, check out the documentation of the functions [`saveScenarioResults()`](https://esqlabs.github.io/esqlabsR/reference/saveScenarioResults) and [`loadScenarioResults()`](https://esqlabs.github.io/esqlabsR/reference/loadScenarioResults).

### Troubleshooting

More detailed information on function signatures can be found in:

-   `esqlabsR` documentation on:
-   [ProjectConfiguration class](https://esqlabs.github.io/esqlabsR/reference/ProjectConfiguration.html)
-   [ScenarioConfiguration class](https://esqlabs.github.io/esqlabsR/reference/ScenarioConfiguration.html)
-   [readScenarioConfigurationFromExcel()](https://esqlabs.github.io/esqlabsR/reference/readScenarioConfigurationFromExcel.html)
-   [runScenarios()](https://esqlabs.github.io/esqlabsR/reference/runScenarios.html)


